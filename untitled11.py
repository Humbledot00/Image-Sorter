# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B49T-UXlP3r3AbC5n_51ssCUw5LrjJD6
"""

!pip uninstall -y dlib
!pip install dlib==19.22.1
!pip install opencv-python
!pip install face_recognition
!pip install scikit-learn

from google.colab import drive
drive.mount('/content/drive')

# Define the source folder in Google Drive
source_folder = '/content/drive/MyDrive/Images'
target_folder = '/content/drive/MyDrive/sorted_images'

import face_recognition
import os
import shutil
from sklearn.cluster import DBSCAN
import numpy as np
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
import joblib

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        try:
            img = face_recognition.load_image_file(img_path)
            images.append((filename, img))
        except Exception as e:
            print(f"Error loading image {filename}: {e}")
    return images

def encode_faces(images):
    encodings = []
    for filename, img in images:
        try:
            face_encodings = face_recognition.face_encodings(img)
            if face_encodings:
                encodings.append((filename, face_encodings[0]))
            else:
                print(f"No faces found in image {filename}")
        except Exception as e:
            print(f"Error encoding image {filename}: {e}")
    return encodings

def cluster_faces(encodings, eps=0.5, min_samples=5):
    face_encodings = [encoding[1] for encoding in encodings]
    if len(face_encodings) == 0:
        return np.array([])  # Handle case with no encodings
    labels = DBSCAN(metric='euclidean', eps=eps, min_samples=min_samples, n_jobs=-1).fit_predict(face_encodings)
    return labels

def sort_images_by_person(encodings, labels):
    persons = {}
    for idx, label in enumerate(labels):
        filename, encoding = encodings[idx]
        if label not in persons:
            persons[label] = []
        persons[label].append(filename)

    # Remove duplicates and preserve the order of first occurrences
    for label, files in persons.items():
        persons[label] = list(dict.fromkeys(files))

    return persons

def create_folders_and_move_images(persons, source_folder, target_folder):
    if not os.path.exists(target_folder):
        os.makedirs(target_folder)

    for person_id, files in persons.items():
        person_folder = os.path.join(target_folder, f'person_{person_id}')
        if not os.path.exists(person_folder):
            os.makedirs(person_folder)

        for file in files:
            src_file_path = os.path.join(source_folder, file)
            dest_file_path = os.path.join(person_folder, file)
            if not os.path.exists(dest_file_path):
                shutil.copy(src_file_path, dest_file_path)

def train_face_recognition_model(encodings, labels):
    face_encodings = [encoding[1] for encoding in encodings]
    le = LabelEncoder()
    y = le.fit_transform(labels)
    model = SVC(kernel='linear', probability=True)
    model.fit(face_encodings, y)
    return model, le

# Step-by-step process
images = load_images_from_folder(source_folder)
encodings = encode_faces(images)

if encodings:
    # Tune the eps and min_samples parameters if needed
    eps = 0.3
    min_samples = 5
    labels = cluster_faces(encodings, eps=eps, min_samples=min_samples)

    persons = sort_images_by_person(encodings, labels)
    create_folders_and_move_images(persons, source_folder, target_folder)

    # Train the face recognition model
    model, label_encoder = train_face_recognition_model(encodings, labels)

    # Save the trained model and label encoder
    model_path = os.path.join(target_folder, 'face_recognition_model.pkl')
    le_path = os.path.join(target_folder, 'label_encoder.pkl')
    joblib.dump(model, model_path)
    joblib.dump(label_encoder, le_path)

    # Zip the sorted images folder if it exists
    if os.path.exists(target_folder):
        from google.colab import files
        !zip -r sorted_images.zip /content/drive/MyDrive/sorted_images
        files.download('sorted_images.zip')

        # Download the model and label encoder
        files.download(model_path)
        files.download(le_path)
else:
    print("No faces found in any of the images.")